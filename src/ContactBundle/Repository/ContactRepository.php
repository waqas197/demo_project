<?php

namespace ContactBundle\Repository;

use ContactBundle\Controller\ContactApiController;
use Knp\Component\Pager\Paginator;
use Psr\Container\ContainerInterface;
use Symfony\Bridge\Doctrine\RegistryInterface;
use ContactBundle\Entity\Contact;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;

/**
 * ContactRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContactRepository extends ServiceEntityRepository
{
    /**
     * @ContainerInterface
     */
    private $container;

    /**
     * ProfilesRepository constructor.
     * @param RegistryInterface $registry
     * @param ContainerInterface $container
     */
    public function __construct(RegistryInterface $registry, ContainerInterface $container)
    {
        $this->container = $container;
        parent::__construct($registry, Contact::class);
    }

    /**
     * This method add contact entity
     *
     * @param Contact $contact
     * @return bool
     */
    public function createOrUpdate(Contact $contact): bool
    {
        try {
            $this->_em->persist($contact);
            $this->_em->flush($contact);

            return true;
        } catch (\Doctrine\ORM\ORMException | \Exception | \Doctrine\ORM\OptimisticLockException $e) {

            return false;
        }
    }

    /**
     * This method delete contact entity
     *
     * @param Contact $contact
     * @return bool
     */
    public function delete(Contact $contact): bool
    {
        try {
            $this->_em->remove($contact);
            $this->_em->flush($contact);

            return true;
        } catch (\Doctrine\ORM\ORMException | \Exception | \Doctrine\ORM\OptimisticLockException $e) {

            return false;
        }
    }

    /**
     * Search contact with specific filters
     *
     * @param array $search
     * @return array
     */
    public function search(array $search): array
    {
        $query = $this->_em->createQueryBuilder()->select('c')
            ->from('AddressBookContactBundle:Contact', 'c');

        if ($search[ContactApiController::NAME]) {
            $query = $query
                ->andWhere('c.firstName LIKE :contactName OR c.lastName LIKE :contactName')
                ->setParameter(ContactApiController::NAME, '%' . $search[ContactApiController::NAME] . '%');
        }

        if ($search[ContactApiController::ADDRESS]) {
            $query = $query
                ->andWhere('c.street LIKE :contactAddress OR c.zip LIKE :contactAddress OR c.city LIKE :contactAddress OR c.country LIKE :contactAddress')
                ->setParameter(ContactApiController::ADDRESS, '%' . $search[ContactApiController::ADDRESS] . '%');
        }

        if ($search[ContactApiController::EMAIL]) {
            $query = $query
                ->andWhere('c.emailAddress LIKE :contactEmail')
                ->setParameter(ContactApiController::EMAIL, '%' . $search[ContactApiController::EMAIL] . '%');
        }



        return $query->getQuery()->getArrayResult();
    }

    /**
     * @param int $from
     * @param int $to
     * @return mixed
     */
    public function getContacts(int $from, int $to)
    {
        $query = $this->_em->createQueryBuilder()
            ->addSelect('contacts')
            ->from('AddressBookContactBundle:Contact', 'contacts')
            ->getQuery();


        return $this->container->get('knp_paginator')->paginate($query, $from, $to);
    }

}
